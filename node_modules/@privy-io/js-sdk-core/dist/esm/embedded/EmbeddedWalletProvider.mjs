import t from"eventemitter3";import{PrivyClientError as e}from"../Error.mjs";import{EmbeddedProviderError as r}from"./errors.mjs";import{isSupportedIframeRpcMethod as a}from"./methods.mjs";import{getJsonRpcProvider as s,populateTransactionRequest as i}from"./utils/index.mjs";import"./types.mjs";import"@ethersproject/abstract-signer";import"@ethersproject/providers";import"./gas/arbitrum.mjs";import"@ethersproject/bignumber";import"../chains/arbitrum.mjs";import"../chains/arbitrumGoerli.mjs";import"../chains/arbitrumSepolia.mjs";import"./utils/ethers.mjs";import"./gas/bsc.mjs";import"./gas/op-stack.mjs";import"@ethersproject/contracts";import"@ethersproject/transactions";import"../chains/base.mjs";import"../chains/baseGoerli.mjs";import"../chains/baseSepolia.mjs";import"../chains/optimism.mjs";import"../chains/optimismGoerli.mjs";import"../chains/optimismSepolia.mjs";import"../chains/zora.mjs";import"../chains/zoraSepolia.mjs";import"../chains/zoraTestnet.mjs";import"./gas/polygon.mjs";import"@ethersproject/units";import"fetch-retry";import"../chains/polygon.mjs";import"../chains/polygonAmoy.mjs";import"../chains/polygonMumbai.mjs";import"./utils/gas.mjs";class n extends t{async request(t){if(a(t.method))return this.handleIFrameRpc(t);switch(t.method){case"eth_accounts":case"eth_requestAccounts":return this._account.address?[this._account.address]:[];case"eth_chainId":return`0x${this._chainId.toString(16)}`;case"wallet_switchEthereumChain":return this.handleSwitchEthereumChain(t);case"eth_estimateGas":return this.handleEstimateGas(t);case"eth_sendTransaction":{let e=t.params?.[0];return this.handleSendTransaction(e)}case"eth_populateTransactionRequest":{let e=t.params?.[0];return this.handlePopulateTransaction(e)}default:return this.handleJsonRpc(t)}}ensureChainId(t){let e={chainId:this._chainId,...t};return this.internalSwitchEthereumChain(e.chainId),e}internalSwitchEthereumChain(t){t&&Number(t)!==this._chainId&&(this._chainId=Number(t),this._jsonRpcProvider=s(this._chainId,this._chains,{rpcUrls:[]},{appId:this._privyInternal.appId}),this.emit("chainChanged",t))}async handlePopulateTransaction(t){let e=this.ensureChainId(t);return i(this._account.address,e,this._jsonRpcProvider)}async handleSendTransaction(t){let e=this.ensureChainId(t),r=await i(this._account.address,e,this._jsonRpcProvider),a=await this.handleIFrameRpc({method:"eth_signTransaction",params:[r]});return await this.handleJsonRpc({method:"eth_sendRawTransaction",params:[a]})}async handleEstimateGas(t){if(!t.params||!Array.isArray(t.params))throw Error("Invalid params for eth_estimateGas");delete t.params[0].gasPrice,delete t.params[0].maxFeePerGas,delete t.params[0].maxPriorityFeePerGas;let e={...t.params[0],chainId:`0x${this._chainId.toString(16)}`};this.internalSwitchEthereumChain(e.chainId);try{return await this._jsonRpcProvider.send("eth_estimateGas",[e])}catch(t){console.warn(`Gas estimation failed with error: ${t}. Retrying gas estimation by omitting the 'from' address`);try{return delete e.from,await this._jsonRpcProvider.send("eth_estimateGas",[e])}catch(e){throw console.warn(`Gas estimation failed with error: ${e} when omitting the 'from' address`),t}}}handleSwitchEthereumChain(t){let e;if(!t.params||!Array.isArray(t.params))throw new r(`Invalid params for ${t.method}`,4200);if("string"==typeof t.params[0])e=t.params[0];else{if(!("chainId"in t.params[0])||"string"!=typeof t.params[0].chainId)throw new r(`Invalid params for ${t.method}`,4200);e=t.params[0].chainId}this.internalSwitchEthereumChain(e)}async handleIFrameRpc(t){try{let e=await this._privyInternal.getAccessToken();if(!e)throw Error("Missing privy token. User must be logged in");return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_started",{method:t.method,address:this._account.address}),(await this._walletProxy.rpcWallet({accessToken:e,request:t,entropyId:this._entropyId,entropyIdVerifier:this._entropyIdVerifier,hdWalletIndex:this._account.wallet_index,chainType:"ethereum"})).response.data}catch(r){console.error(r);let a=r instanceof Error?r.message:"Unable to make wallet request";throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_failed",{method:t.method,address:this._account.address,error:a}),new e({code:"embedded_wallet_request_error",error:a})}}async handleJsonRpc(t){return this._jsonRpcProvider.send(t.method,t.params??[])}toJSON(){return`PrivyEIP1193Provider { address: '${this._account.address}', chainId: ${this._chainId}, request: [Function] }`}constructor({walletProxy:t,privyInternal:e,account:r,entropyId:a,entropyIdVerifier:i,chains:n,chainId:o=n[0].id}){super(),this._walletProxy=t,this._privyInternal=e,this._account=r,this._entropyId=a,this._entropyIdVerifier=i,this._chainId=o,this._chains=n,this._jsonRpcProvider=s(o,n,{rpcUrls:[]},{appId:this._privyInternal.appId})}}export{n as EmbeddedWalletProvider};
