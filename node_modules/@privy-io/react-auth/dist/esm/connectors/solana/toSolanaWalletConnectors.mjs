import{isWalletAdapterCompatibleStandardWallet as t}from"@solana/wallet-adapter-base";import{StandardWalletAdapter as e}from"@solana/wallet-standard-wallet-adapter-base";import{getWallets as o}from"@wallet-standard/app";import{SolanaWalletConnector as r}from"./index.mjs";import"../../hooks/index.mjs";import"../base.mjs";import"eventemitter3";import"../errors.mjs";import"@privy-io/js-sdk-core";import"../../errors.mjs";import"ofetch";import"../stored-connection.mjs";import"../../constants.mjs";import"../../storage.mjs";const n=t=>{let e,{get:n,on:s}=o(),a=t?.shouldAutoConnect??!0,p=[],i=[];function l(...t){i=(p=p.concat(...m(t))).map((t=>new r(t,a))),e?.(i)}function d(...t){i=(p=p.filter((e=>t.some((t=>e.wallet===t))))).map((t=>new r(t,a))),e?.(i)}let c=[s("register",l),s("unregister",d)];return i=(p=m(n())).map((t=>new r(t,a))),{_setOnConnectorsUpdated:t=>{e=t},onMount:()=>{c[0]||(c[0]=s("register",l)),c[1]||(c[1]=s("unregister",d))},onUnmount:()=>{let t=c.pop();for(;t;)t(),t=c.pop()},get:()=>i}};let m=o=>o.filter(t).map((t=>new e({wallet:t})));export{n as toSolanaWalletConnectors};
