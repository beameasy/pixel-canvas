import{jsx as e}from"react/jsx-runtime";import{useRef as r,useState as t,useEffect as i}from"react";import{useEmitPrivyEvent as a}from"../hooks/events-context.mjs";import{invokeUntilSettled as n,constructURL as o}from"../utils/index.mjs";import{PrivyIframeError as s}from"./errors.mjs";import{EventCallbacksQueue as l}from"./eventCallbacksQueue.mjs";import{invokeWithMfa as m}from"./invokeWithMfa.mjs";import"../connectors/get-legacy-injected-providers.mjs";import"../connectors/is-wallet-installed.mjs";import"../errors.mjs";import"ofetch";import"../utils/eth/getPublicClient.mjs";import"viem";import"./types.mjs";var c;let u=(c=0,()=>"id-"+c++);function d(e){return void 0!==e.error}let v=new l,p=new Map,y=(e,r)=>"bigint"==typeof r?r.toString():r,f=(e,r)=>`${e}${JSON.stringify(r,y)}`;function g(e,r,t,i){let a=t.contentWindow;if(!a)throw Error("iframe not initialized");let n=f(e,r);if("privy:wallet:create"===e){let e=p.get(n);if(e)return e}let o=new Promise(((t,n)=>{let o=u();v.enqueue(o,{resolve:t,reject:n}),a.postMessage({id:o,event:e,data:r},i)})).finally((()=>{p.delete(n)}));return p.set(n,o),o}function w(l){let c=r(null),u=r(l.mfaMethods),p=a(),[y,f]=t(!1);return i((()=>{u.current=l.mfaMethods}),[l.mfaMethods]),i((()=>{if(!y)return;let e=c.current;if(!e)return;function r(e){var r;e&&e.origin===l.origin&&"string"==typeof(r=e.data).event&&/^privy:.+/.test(r.event)&&function(e){switch(e.event){case"privy:iframe:ready":let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data);case"privy:wallets:create":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:wallets:add":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:wallets:set-recovery":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:wallets:connect":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:wallets:recover":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:wallets:rpc":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:wallet:create":let t=v.dequeue(e.event,e.id);return d(e)?t.reject(new s(e.error.type,e.error.message)):t.resolve(e.data);case"privy:wallets:import":let i=v.dequeue(e.event,e.id);return d(e)?i.reject(new s(e.error.type,e.error.message)):i.resolve(e.data);case"privy:mfa:verify":let a=v.dequeue(e.event,e.id);return d(e)?a.reject(new s(e.error.type,e.error.message)):a.resolve(e.data);case"privy:mfa:init-enrollment":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:mfa:submit-enrollment":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:mfa:unenroll":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:mfa:clear":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:auth:unlink-passkey":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:solana-wallet:create":let n=v.dequeue(e.event,e.id);return d(e)?n.reject(new s(e.error.type,e.error.message)):n.resolve(e.data);case"privy:farcaster:init-signer":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:farcaster:sign":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}case"privy:delegated-actions:consent":{let r=v.dequeue(e.event,e.id);return d(e)?r.reject(new s(e.error.type,e.error.message)):r.resolve(e.data)}default:console.warn("Unsupported wallet proxy method:",e)}}(e.data)}let t={createWallet:r=>m((t=>g("privy:wallets:create",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),addWallet:r=>m((t=>g("privy:wallets:add",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),setRecovery:r=>m((t=>g("privy:wallets:set-recovery",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),connect:r=>m((t=>g("privy:wallets:connect",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),recover:r=>m((t=>g("privy:wallets:recover",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p,!r.recoveryAccessToken&&!r.recoveryPassword&&!r.recoverySecretOverride),rpc:r=>m((t=>g("privy:wallets:rpc",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),create:r=>g("privy:wallet:create",r,e,l.origin),importWallet:r=>g("privy:wallets:import",r,e,l.origin),createSolana:r=>m((t=>g("privy:solana-wallet:create",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),createDelegatedAction:r=>g("privy:delegated-actions:consent",r,e,l.origin),verifyMfa:r=>m((t=>g("privy:mfa:verify",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p,!0),initEnrollMfa:r=>m((t=>g("privy:mfa:init-enrollment",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),submitEnrollMfa:r=>m((t=>g("privy:mfa:submit-enrollment",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),unenrollMfa:r=>m((t=>g("privy:mfa:unenroll",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),clearMfa:r=>g("privy:mfa:clear",r,e,l.origin),unlinkPasskeyAccount:r=>m((t=>g("privy:auth:unlink-passkey",{...r,...t},e,l.origin)),u.current,l.mfaPromise,l.mfaSubmitPromise,p),initFarcasterSigner:r=>g("privy:farcaster:init-signer",r,e,l.origin),signFarcasterMessage:r=>g("privy:farcaster:sign",r,e,l.origin)};window.addEventListener("message",r);let i=new AbortController;return n((()=>g("privy:iframe:ready",{},e,l.origin)),{abortSignal:i.signal}).then((()=>l.onLoad(t)),((...e)=>{console.warn("Privy iframe failed to load: ",...e),l.onLoadFailed()})),()=>{window.removeEventListener("message",r),i.abort()}}),[y]),
/*#__PURE__*/e("iframe",{ref:c,width:"0",height:"0",style:{display:"none",height:"0px",width:"0px"},onLoad:()=>f(!0),src:o(l.origin,`/apps/${l.appId}/embedded-wallets`,{caid:l.clientAnalyticsId,client_id:l.appClientId})})}export{w as EmbeddedWalletIframe};
