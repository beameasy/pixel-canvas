import{ofetch as t}from"ofetch";import{VERSION as e}from"./constants.mjs";import{formatApiError as r,PrivyTimeoutError as s}from"./errors.mjs";import{sessionsRefreshPath as i,recoverForkedSessionsPath as a,sessionsLogoutPath as n,analyticsEventsPath as o}from"./paths.mjs";let c=[i,a,n,o];class l{async get(t,e){try{return await this.baseFetch(t,e)}catch(t){throw r(t)}}async post(t,e,s){try{return await this.baseFetch(t,{method:"POST",...e?{body:e}:{},...s})}catch(t){throw r(t)}}async delete(t,e){try{return await this.baseFetch(t,{method:"DELETE",...e})}catch(t){throw r(t)}}constructor({appId:r,appClientId:i,client:a,defaults:n}){this.appId=r,this.appClientId=i,this.clientAnalyticsId=a.clientAnalyticsId,this.sdkVersion=e,this.client=a,this.defaults=n,this.fallbackApiUrl=a.fallbackApiUrl,this.baseFetch=t.create({baseURL:this.defaults.baseURL,timeout:this.defaults.timeout,retry:3,retryDelay:500,retryStatusCodes:[408,409,425,500,502,503,504],credentials:"include",onRequest:async({request:t,options:e})=>{let r=new Headers(e.headers);r.set("privy-app-id",this.appId),this.appClientId&&r.set("privy-client-id",this.appClientId),r.set("privy-ca-id",this.clientAnalyticsId||""),r.set("privy-client",`react-auth:${this.sdkVersion}`);let s=c.includes(t.toString());if(!r.has("authorization")){let t=await this.client.getAccessToken({disableAutoRefresh:s});null!==t&&r.set("authorization",`Bearer ${t}`)}e.headers=r,e.retryDelay&&"number"==typeof e.retryDelay&&(e.retryDelay=3*e.retryDelay)},onRequestError:({error:t})=>{if(t instanceof DOMException&&"AbortError"===t.name)throw new s}})}}export{l as Http};
