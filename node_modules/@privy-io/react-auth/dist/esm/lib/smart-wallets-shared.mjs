import{createSmartAccountClient as e}from"permissionless";import{toThirdwebSmartAccount as r,toLightSmartAccount as t,toBiconomySmartAccount as n,toEcdsaKernelSmartAccount as i,toSafeSmartAccount as s}from"permissionless/accounts";import{createPimlicoClient as o}from"permissionless/clients/pimlico";import{http as a}from"viem";import{toCoinbaseSmartAccount as c,entryPoint06Address as l,entryPoint07Address as p}from"viem/account-abstraction";import{THIRDWEB as m,COINBASE_SMART_WALLET as u,LIGHT_ACCOUNT as y,BICONOMY as d,KERNEL as w,SAFE as P}from"@privy-io/js-sdk-core";let v={address:l,version:"0.6"},f={address:p,version:"0.7"},h=({owner:e,smartWalletType:o,publicClient:a})=>{switch(o){case P:return s({client:a,entryPoint:f,owners:[e],version:"1.4.1"});case w:return i({client:a,version:"0.3.1",entryPoint:f,owners:[e]});case d:return n({client:a,owners:[e],entryPoint:v});case y:return t({client:a,entryPoint:v,owner:e,version:"1.1.0"});case u:return async function({client:e,owner:r}){let[t]=await r.request({method:"eth_accounts"});if(!t)throw Error("Unable to request embedded owner for eth_accounts");return await c({client:e,owners:[{type:"local",source:"privy",address:t,sign:async({hash:e})=>await r.request({method:"secp256k1_sign",params:[e]})}]})}({client:a,owner:e});case m:return r({client:a,entryPoint:f,owner:e});default:throw Error(`Invalid smart account type: ${o}.`)}},b=["rpc.zerodev.app","public.pimlico.io","api.pimlico.io"];const x=async({owner:r,smartWalletType:t,chain:n,publicClient:i,bundlerUrl:s,paymasterUrl:c,paymasterContext:l})=>{let p=await h({owner:r,smartWalletType:t,publicClient:i}),m=o({transport:a(s),entryPoint:p.entryPoint}),u=c?o({transport:a(c),entryPoint:p.entryPoint}):void 0;return e({account:p,chain:n,paymaster:u,paymasterContext:l,bundlerTransport:a(s),userOperation:{estimateFeesPerGas:async()=>{if(b.some((e=>s.includes(e))))return await m.getUserOperationGasPrice().then((e=>e.fast));{let e=await i.estimateFeesPerGas(),r=s.includes("api.developer.coinbase.com")?175n:150n;return{...e,maxFeePerGas:e.maxFeePerGas*r/100n,maxPriorityFeePerGas:e.maxPriorityFeePerGas*r/100n}}}}})};export{x as signerToSmartAccountClient};
