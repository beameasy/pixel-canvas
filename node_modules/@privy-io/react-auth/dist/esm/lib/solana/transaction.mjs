import{getSolanaNetworkFromRpcEndpoint as t}from"./index.mjs";import{readBigInt64LEFromUint8Array as e,readBigInt64LE as n}from"../../utils/buffer/readBigInt64LE.mjs";import{attempt as r}from"../attempt.mjs";const o=1e9,a="11111111111111111111111111111111",i="TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",s="TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",c="ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL";let u=new Intl.NumberFormat(void 0,{style:"currency",currency:"USD",maximumFractionDigits:2});function l(t,e=6,n=!1,r=!1){let o=(parseFloat(t.toString())/1e9).toFixed(e).replace(/0+$/,"").replace(/\.$/,""),a=r?"":" SOL";return n?`${o}${a}`:`${"0"===o?"<0.001":o}${a}`}function f(t,e){let n=parseFloat(t.toString())/1e9,r=u.format(e*n);return"$0.00"===r?"<$0.01":r}function d({amount:t,fee:e,tokenPrice:n}){let r=BigInt(1e9*parseFloat(t)),o=r+e;return{fundingAmountInBaseUnit:r,fundingAmountInUsd:n?f(r,n):void 0,totalPriceInUsd:n?f(o,n):void 0,totalPriceInNativeCurrency:l(o),feePriceInNativeCurrency:l(e),feePriceInUsd:n?f(e,n):void 0}}function m(t){return"version"in t}function p(t,e){let n=(m(t)?t.message:t.compileMessage()).staticAccountKeys.find((t=>t.toBase58()===e));if(!n)throw Error(`Transaction does not contain public key ${e}`);return n}async function y(t,e){return BigInt((m(t)?(await e.getFeeForMessage(t.message)).value:await t.getEstimatedFee(e))??0)}function A(t,e,n){return{signature:t,parsedTransaction:n??null,signedTransaction:e,fees:BigInt(n?.meta?.fee||0)}}async function g(t,e){let{value:n}=await e.simulateTransaction(t);if("BlockhashNotFound"===n.err)throw Error("Simulation failed: Blockhash not found");return null==n.err&&n.logs?.every((t=>!/insufficient funds/gi.test(t)))}async function B({tx:t,connection:e,client:n}){let o=m(t)?t.message:t.compileMessage(),a=o.staticAccountKeys[0]?.toBase58()??"",i=await y(t,e),s={},c={},u=[];for(let t of o.compiledInstructions){let a=o.staticAccountKeys[t.programIdIndex]?.toBase58()||"";if("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"!==a&&"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"!==a)if("11111111111111111111111111111111"!==a)if("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"!==a)u.push({type:"unknown",program:a});else{let e=await r(function(t,e){let[n,r,o,a]=t.accountKeyIndexes.map((t=>e.staticAccountKeys[t]));if(!(n&&r&&o&&a))throw Error("Failed to parse ATA creation instruction");return{type:"ata-creation",payer:n.toBase58(),ata:r.toBase58(),owner:o.toBase58(),mint:a.toBase58()}}(t,o));if(!e)continue;u.push(e),c[e.ata]={owner:e.owner,mint:e.mint}}else{let e=await r(b(t,o));if(!e)continue;u.push(e)}else{let a=await r(k(t,o,e,n,s,c));if(!a)continue;u.push(a),s[a.token.address]=a.token,c[a.fromAta]??={owner:a.fromAccount,mint:a.token.address},a.toAccount&&(c[a.toAta]??={owner:a.toAccount,mint:a.token.address})}}let l=u.filter((({type:t})=>["spl-transfer","sol-transfer"].includes(t)));return{spender:a,fee:i,instructions:l.length?l:u}}function w(t,r){try{return e(t,r)}catch{}try{return t.readBigInt64LE(r)}catch{}let o=Buffer.from(t);try{return n(o)}catch{}try{return o.subarray(r).readBigInt64LE()}catch{}try{return o.readBigInt64LE(r)}catch{}return 0n}async function k(e,n,r,o,a,i){let s,c,[u,l,f]=e.accountKeyIndexes.map((t=>n.staticAccountKeys[t]));if(!u||!l||!f)throw Error("Failed to parse SPL transfer instruction");let d="",m=i[l.toBase58()];if(m)s=m.owner,d=m.mint;else{let t=await r.getParsedAccountInfo(l,"confirmed"),e=t.value?.data;s=e?.parsed?.info?.owner,d=e?.parsed?.info?.mint??"",c=e?.parsed?.info?.tokenAmount?.decimals}if(!d){let t=await r.getParsedAccountInfo(u,"confirmed"),e=t.value?.data;d=e?.parsed?.info?.mint??""}let p=a[d];if(d&&!p){let e=await o.getSplTokenMetadata({mintAddress:d,cluster:t(r.rpcEndpoint)});e&&(p={address:d,symbol:e.symbol,decimals:e.decimals})}let y=p?.symbol??"";c??=p?.decimals??9;let A=w(e.data,1);return{type:"spl-transfer",fromAta:u.toBase58(),fromAccount:f.toBase58(),toAta:l.toBase58(),toAccount:s,value:A,token:{symbol:y,decimals:c,address:d}}}async function b(t,e){let[n,r]=t.accountKeyIndexes.map((t=>e.staticAccountKeys[t]));if(!n||!r)throw Error("Failed to parse SOL transfer instruction");let o=w(t.data,4);return{type:"sol-transfer",fromAccount:n.toBase58(),toAccount:r.toBase58(),value:o,token:{symbol:"SOL",decimals:9}}}export{c as ASSOCIATED_TOKEN_PROGRAM_ID,o as LAMPORTS_PER_SOL,a as SYSTEM_PROGRAM_ID,s as TOKEN_2022_PROGRAM_ID,i as TOKEN_PROGRAM_ID,A as createSolanaTransactionReceipt,f as getDollarsFromLamport,l as getNativeCurrencyFromLamports,d as getSolanaFormattedAmounts,y as getTransactionFees,p as getWalletPublicKeyFromTransaction,g as hasSufficientFunds,m as isVersionedTransaction,B as parseSolanaTransaction};
