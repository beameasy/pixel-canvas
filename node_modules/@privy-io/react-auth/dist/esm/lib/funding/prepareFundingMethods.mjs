import{isSupportedChainIdForMoonpay as o,isSupportedChainIdForCoinbaseOnramp as i}from"@privy-io/js-sdk-core";import{ModalScreen as n}from"../../screens/index.mjs";import{triggerCoinbaseFlow as r}from"./coinbase/triggerCoinbaseFlow.mjs";import{triggerMoonpayFlow as s}from"./moonpay/triggerMoonpayFlow.mjs";import"../popup/triggerPopup.mjs";import"./coinbase/toCoinbaseBlockchainFromChainId.mjs";import"../../connectors/chains/arbitrum.mjs";import"../../connectors/chains/base.mjs";import"../../connectors/chains/mainnet.mjs";import"../../connectors/chains/optimism.mjs";import"../../connectors/chains/polygon.mjs";import"../../errors.mjs";import"ofetch";import"./moonpay/index.mjs";import"react";import"../../constants.mjs";import"../../hooks/internal-context.mjs";import"../../hooks/index.mjs";import"../../hooks/modal-context.mjs";import"react/jsx-runtime";import"../../components/PrefetchedImage.mjs";import"../../configuration/context.mjs";import"../../config.mjs";import"../../configuration/defaultClientConfig.mjs";import"../../configuration/login-methods.mjs";import"../../configuration/wallets.mjs";import"../../connectors/chains/index.mjs";import"../../connectors/chains/arbitrumSepolia.mjs";import"../../connectors/chains/avalanche.mjs";import"../../connectors/chains/avalancheFuji.mjs";import"../../connectors/chains/baseSepolia.mjs";import"../../connectors/chains/berachainArtio.mjs";import"../../connectors/chains/celo.mjs";import"../../connectors/chains/celoAlfajores.mjs";import"../../connectors/chains/filecoin.mjs";import"../../connectors/chains/filecoinCalibration.mjs";import"../../connectors/chains/garnetHolesky.mjs";import"../../connectors/chains/holesky.mjs";import"../../connectors/chains/linea.mjs";import"../../connectors/chains/lineaTestnet.mjs";import"../../connectors/chains/lukso.mjs";import"../../connectors/chains/optimismSepolia.mjs";import"../../connectors/chains/polygonAmoy.mjs";import"../../connectors/chains/redstone.mjs";import"../../connectors/chains/sepolia.mjs";import"../../connectors/chains/zora.mjs";import"../../connectors/chains/zoraSepolia.mjs";import"../../connectors/chains/zoraTestnet.mjs";import"../../connectors/chains/utils.mjs";import"../solana/index.mjs";import"../../theme.mjs";import"tinycolor2";import"../cybr53.mjs";import"./analytics.mjs";const t=(t,e,m,c,a,p)=>{let h,j,d="solana"===m.chainType,l=d?void 0:m,u=m.isUSDC?"USDC":l?.erc20Address?void 0:"native-currency",f=!!d||u&&o(Number(m.chain.id),u),g=!!d||u&&i(Number(m.chain.id),u),b=[];for(let o of(m.preferredCardProvider&&m.supportedOptions.sort((o=>o.provider===m.preferredCardProvider?-1:1)),m.supportedOptions))"card"===o.method&&"coinbase"===o.provider&&g&&b.push((()=>r(e,m,c,a,p,"buy"))),"card"===o.method&&"moonpay"===o.provider&&f&&u&&b.push((()=>s(e,m,t,u,c,a,p,"credit_debit_card")));for(let o of m.supportedOptions)"exchange"===o.method&&"coinbase"===o.provider&&g&&(h=()=>r(e,m,c,a,p,"buy"));for(let o of p?.funding?.supportedOptions??[])"wallets"===o.method&&(j=()=>a(n.FUNDING_TRANSFER_FROM_WALLET_SCREEN));return{onFundWithCard:b,onFundWithExchange:h,onFundWithWallet:j}};export{t as prepareFundingMethods};
