import{chainToMoonpayCurrency as o}from"@privy-io/js-sdk-core";import{ModalScreen as n}from"../../../screens/index.mjs";import{triggerPopup as t}from"../../popup/triggerPopup.mjs";import{amountToMoonpayAmount as i}from"./index.mjs";import"ofetch";import"react";import"../../../constants.mjs";import"../../../hooks/internal-context.mjs";import"../../../hooks/index.mjs";import"../../../hooks/modal-context.mjs";import"react/jsx-runtime";import"../../../components/PrefetchedImage.mjs";import"../../../configuration/context.mjs";import"../../../config.mjs";import"../../../configuration/defaultClientConfig.mjs";import"../../../configuration/login-methods.mjs";import"../../../configuration/wallets.mjs";import"../../../connectors/chains/index.mjs";import"../../../connectors/chains/arbitrum.mjs";import"../../../connectors/chains/arbitrumSepolia.mjs";import"../../../connectors/chains/avalanche.mjs";import"../../../connectors/chains/avalancheFuji.mjs";import"../../../connectors/chains/base.mjs";import"../../../connectors/chains/baseSepolia.mjs";import"../../../connectors/chains/berachainArtio.mjs";import"../../../connectors/chains/celo.mjs";import"../../../connectors/chains/celoAlfajores.mjs";import"../../../connectors/chains/filecoin.mjs";import"../../../connectors/chains/filecoinCalibration.mjs";import"../../../connectors/chains/garnetHolesky.mjs";import"../../../connectors/chains/holesky.mjs";import"../../../connectors/chains/linea.mjs";import"../../../connectors/chains/lineaTestnet.mjs";import"../../../connectors/chains/lukso.mjs";import"../../../connectors/chains/mainnet.mjs";import"../../../connectors/chains/optimism.mjs";import"../../../connectors/chains/optimismSepolia.mjs";import"../../../connectors/chains/polygon.mjs";import"../../../connectors/chains/polygonAmoy.mjs";import"../../../connectors/chains/redstone.mjs";import"../../../connectors/chains/sepolia.mjs";import"../../../connectors/chains/zora.mjs";import"../../../connectors/chains/zoraSepolia.mjs";import"../../../connectors/chains/zoraTestnet.mjs";import"../../../connectors/chains/utils.mjs";import"../../solana/index.mjs";import"../../../theme.mjs";import"tinycolor2";import"../../cybr53.mjs";import"../analytics.mjs";const e=async(e,r,s,c,m,a,p,h)=>{let l=t();if(!l)throw Error("Unable to initialize flow");let j="ethereum"===r.chainType?r.moonpayConfigOverride?.currencyCode??o(r.chain.id,c):"SOL",{signedUrl:d,externalTransactionId:u}=await e.signMoonpayOnRampUrl({address:r.address,useSandbox:s.fundingMethodConfig.moonpay.useSandbox??!1,config:{uiConfig:{accentColor:s.appearance.palette.accent,theme:s.appearance.palette.colorScheme},...r.moonpayConfigOverride,paymentMethod:h??s.fundingMethodConfig.moonpay.paymentMethod,currencyCode:j,quoteCurrencyAmount:r.moonpayConfigOverride?.quoteCurrencyAmount??i(r.amount)}});e.createAnalyticsEvent({eventName:"sdk_fiat_on_ramp_started",payload:{provider:"moonpay",value:r.amount,chainType:r.chainType,chainId:"ethereum"===r.chainType?r.chain.id:r.cluster.name}}),l.location=d;let f={...p?.funding,showAlternateFundingMethod:!0};r.usingDefaultFundingMethod&&(f.usingDefaultFundingMethod=!1),m({moonpayStatus:{},funding:f}),a(n.MOONPAY_STATUS_SCREEN),setTimeout((()=>{m({moonpayStatus:{externalTransactionId:u},funding:f})}),8e3)};export{e as triggerMoonpayFlow};
