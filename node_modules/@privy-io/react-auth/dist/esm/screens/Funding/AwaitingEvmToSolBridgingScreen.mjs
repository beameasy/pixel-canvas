import{jsxs as o,Fragment as t,jsx as e}from"react/jsx-runtime";import n from"@heroicons/react/24/outline/CheckCircleIcon";import{useState as i,useEffect as r}from"react";import{createWalletClient as s,custom as a,publicActions as m,createPublicClient as c,http as l,formatUnits as p}from"viem";import{RefactorSpacerTop as d,CenteredItemWithGap as u,RefactorSpacerBottom as h}from"../../components/Layouts.mjs";import{BlobbyFooter as g}from"../../components/ModalFooter.mjs";import{CenteredScreenHeader as j}from"../../components/ScreenHeader.mjs";import f from"../../components/embedded-wallets/FundWalletMethodHeader.mjs";import{NeutralSpinner as v}from"../../components/primitives/NeutralSpinner/index.mjs";import{addToDefaultChains as y}from"../../connectors/chains/utils.mjs";import{DEFAULT_SUCCESS_SCREEN_EXTRA_LONG_DURATION_MS as b}from"../../constants.mjs";import{PrivyClientError as w,PrivyErrorCode as I}from"../../errors.mjs";import{usePrivyInternal as C}from"../../hooks/internal-context.mjs";import{usePrivyModal as T}from"../../hooks/modal-context.mjs";import{useGetTokenPrice as S}from"../../hooks/useGetTokenPrice.mjs";import{useWallets as k}from"../../hooks/useWallets.mjs";import{toDisplayName as N}from"../../lib/external-wallets/displayHelpers.mjs";import{ON_RAMP_COMPLETE_ANALYTICS_EVENT as x}from"../../lib/funding/analytics.mjs";import{getQuote as A,toGetQuoteInput as E,toEvmTransactionRequestInfoFromQuote as F,useBridgingStatusPolling as B}from"../../lib/funding/reservoir.mjs";import{RELAY_SOLANA_MAINNET_CLUSTER_CHAIN_ID as L,RELAY_SOLANA_NATIVE_CURRENCY_ID as P}from"../../lib/solana/index.mjs";import{getNativeCurrencyFromLamports as M,getSolanaFormattedAmounts as U}from"../../lib/solana/transaction.mjs";import{getBalanceForChains as R}from"../../lib/wallets/actions/getBalanceForChains.mjs";import{usePlugins as H}from"../../plugins/context/PrivyPluginContext.mjs";import{SOLANA_FUNDING_PLUGIN_ID as O}from"../../plugins/solana-funding/id.mjs";import{formatWalletAddress as W}from"../../utils/index.mjs";import{getJsonRpcEndpointFromChain as _}from"../../utils/eth/getPublicClient.mjs";import{ModalScreen as q}from"../index.mjs";import{BridgeNetworkSelectionView as $}from"./BridgeNetworkSelectionView.mjs";import{TransferOrBridgeLoadingScreen as z}from"./TransferOrBridgeLoadingScreen.mjs";import"styled-components";import"../../configuration/context.mjs";import"../../config.mjs";import"../../configuration/defaultClientConfig.mjs";import"../../configuration/login-methods.mjs";import"../../configuration/wallets.mjs";import"../../connectors/chains/index.mjs";import"../../connectors/chains/arbitrum.mjs";import"../../connectors/chains/arbitrumSepolia.mjs";import"../../connectors/chains/avalanche.mjs";import"../../connectors/chains/avalancheFuji.mjs";import"../../connectors/chains/base.mjs";import"../../connectors/chains/baseSepolia.mjs";import"../../connectors/chains/berachainArtio.mjs";import"../../connectors/chains/celo.mjs";import"../../connectors/chains/celoAlfajores.mjs";import"../../connectors/chains/filecoin.mjs";import"../../connectors/chains/filecoinCalibration.mjs";import"../../connectors/chains/garnetHolesky.mjs";import"../../connectors/chains/holesky.mjs";import"../../connectors/chains/linea.mjs";import"../../connectors/chains/lineaTestnet.mjs";import"../../connectors/chains/lukso.mjs";import"../../connectors/chains/mainnet.mjs";import"../../connectors/chains/optimism.mjs";import"../../connectors/chains/optimismSepolia.mjs";import"../../connectors/chains/polygon.mjs";import"../../connectors/chains/polygonAmoy.mjs";import"../../connectors/chains/redstone.mjs";import"../../connectors/chains/sepolia.mjs";import"../../connectors/chains/zora.mjs";import"../../connectors/chains/zoraSepolia.mjs";import"../../connectors/chains/zoraTestnet.mjs";import"../../theme.mjs";import"tinycolor2";import"../../lib/cybr53.mjs";import"../../svg/protected-by-privy.mjs";import"../../components/ModalHeader.mjs";import"@heroicons/react/24/outline/ArrowLeftIcon";import"@heroicons/react/24/outline/ArrowRightIcon";import"@heroicons/react/24/outline/QuestionMarkCircleIcon";import"@heroicons/react/24/outline/XMarkIcon";import"../../hooks/index.mjs";import"ofetch";import"../../components/PrefetchedImage.mjs";import"../../hooks/useGetSolPrice.mjs";import"../../svg/backpack.mjs";import"../../svg/brave-browser-icon.mjs";import"../../svg/bybit.mjs";import"../../svg/coinbase-wallet.mjs";import"../../svg/cryptocom.mjs";import"../../svg/metamask.mjs";import"../../svg/okx-wallet.mjs";import"../../svg/phantom.mjs";import"../../svg/rabby.mjs";import"../../svg/rainbow.mjs";import"../../svg/safe.mjs";import"../../svg/solflare.mjs";import"../../svg/uniswap.mjs";import"../../svg/universal-profile.mjs";import"../../svg/wallet-connect.mjs";import"../../svg/zerion.mjs";import"../../utils/buffer/readBigInt64LE.mjs";import"../../lib/attempt.mjs";import"../../connectors/get-legacy-injected-providers.mjs";import"../../connectors/is-wallet-installed.mjs";import"@privy-io/js-sdk-core";import"../../components/Button.mjs";import"../../components/Loader.mjs";import"../../components/ui/layout/Row.mjs";import"../../components/ui/typography/ErrorMessage.mjs";import"../../components/ui/typography/LabelSm.mjs";import"../../components/ui/typography/Subtitle.mjs";import"../../components/ui/typography/Title.mjs";import"../../components/ui/wallet/NetworkBalanceCard.mjs";import"@heroicons/react/24/outline/WalletIcon";import"../../components/ui/chips/Chip.mjs";import"../../components/ui/animation/LoadingSkeleton.mjs";import"../../components/ui/typography/Value.mjs";import"../../components/ui/wallet/NetworkIcon.mjs";import"@heroicons/react/24/outline/GlobeAltIcon";import"../../components/ui/icons/Arbitum.mjs";import"../../components/ui/icons/Avalanche.mjs";import"../../components/ui/icons/Base.mjs";import"../../components/ui/icons/Celo.mjs";import"../../components/ui/icons/Linea.mjs";import"../../components/ui/icons/Mainnnet.mjs";import"../../components/ui/icons/Optimism.mjs";import"../../components/ui/icons/Polygon.mjs";import"../../components/ui/icons/Solana.mjs";import"../../components/ui/icons/Zora.mjs";import"../../components/ui/wallet/shared.mjs";import"../../components/ui/wallet/NetworkSelectorPanel.mjs";import"@headlessui/react";import"@heroicons/react/24/outline/ChevronDownIcon";import"../../lib/ethers.mjs";import"./styles.mjs";import"../LinkPasskeyScreen.mjs";import"@heroicons/react/24/outline/ClockIcon";import"@heroicons/react/24/outline/TrashIcon";import"@heroicons/react/24/solid/CheckBadgeIcon";import"@heroicons/react/24/solid/LockClosedIcon";import"../../hooks/privy-context.mjs";import"../../svg/face-id.mjs";import"../../svg/fingerprint.mjs";import"../MfaScreens/StyledComponents.mjs";import"../../components/external-wallets/InjectedWalletIcon.mjs";import"../../components/ui/wallet/Address.mjs";import"@heroicons/react/24/outline/CheckIcon";import"@heroicons/react/24/outline/Square2StackIcon";const D=()=>{let{rpcConfig:D,appId:G,closePrivyModal:V,createAnalyticsEvent:Q}=C(),{navigate:X,setModalData:Y,app:Z,data:J}=T(),{wallets:K}=k(),oo=H(),[to,eo]=i(null),[no,io]=i(null),[ro,so]=i([]),[ao,mo]=i(0),[co,lo]=i(!1),[po,uo]=i(!1),[ho,go]=i(!1),[jo,fo]=i(!1),[vo,yo]=i(),[bo,wo]=i();if(!J?.funding||"solana"!==J.funding.chainType)throw Error("Invalid funding data");let{address:Io,cluster:Co,connectedWalletAddress:To}=J.funding,[So,ko]=i(J.funding.amount),No=To?K.find((({address:o})=>o===To)):K[0],[xo,Ao]=i(null);r((()=>{(async()=>{if(!No)return;let o=await No.getEthereumProvider();Ao(s({account:No.address,transport:a(o)}).extend(m))})().catch(console.error)}),[No]);let[Eo,Fo]=i(0n),Bo=M(Eo);r((()=>{let o=oo(O);o?o.getBalance({address:Io,cluster:Co}).then((o=>Fo(BigInt(o)))):console.warn("Unable to load solana plugin, skipping balance")}),[]);let[Lo,Po]=i(),{tokenPrice:Mo}=S("solana"),{fundingAmountInBaseUnit:Uo,fundingAmountInUsd:Ro}=U({amount:So,fee:0n,tokenPrice:Mo});r((()=>{(async()=>{if(!xo||!No)return;let o=["testnet","devnet"].includes(Co.name);o&&console.warn("Solana testnets are not supported for bridging");let t=y(Z.chains).filter((({testnet:t})=>!!t===o)),e=(await R({chains:t,address:No.address,appId:G,rpcConfig:D})).filter((o=>o.balance>0n));if(e.length<1)return void eo(new w(`Wallet ${W(No.address)} does not have enough funds.`,void 0,I.INSUFFICIENT_BALANCE));e.sort(((o,t)=>Number(t.balance-o.balance)));let n=(await Promise.allSettled(e.map((async o=>({...o,quote:await A({isTestnet:!1,input:E({amount:Uo.toString(),user:No.address,recipient:Io,destinationChainId:L,destinationCurrency:P,originChainId:o.chain.id})})}))))).filter((o=>"fulfilled"===o.status)).map((o=>o.value));if(n.length<1)return void eo(new w(`Unable to fetch quotes for bridging. Wallet ${W(No.address)} does not have enough funds.`,void 0,I.INSUFFICIENT_BALANCE));let i=n.map((({quote:o,balance:t,chain:e})=>({bridgeTx:F(o),balance:t,chain:e}))).filter((({bridgeTx:o})=>!!o));if(i.length>1)return void so(i);let r=i.at(0);r?(uo(!0),Po({data:r.bridgeTx.data,to:r.bridgeTx.to,value:r.bridgeTx.value,chain:r.chain})):eo(new w(`Unable to select bridge option from quotes. Wallet ${W(No.address)} does not have enough funds.`,void 0,I.INSUFFICIENT_BALANCE))})().catch(console.error)}),[xo]),r((()=>{(async()=>{let o,t;if(!xo||!No||co||ho||!Lo)return;lo(!0);let e=c({chain:Lo.chain,transport:l(_(Lo.chain,D,G))});try{o=await e.prepareTransactionRequest({account:No.address,to:Lo.to,chain:Lo.chain,data:Lo.data,value:BigInt(Lo.value??0)})}catch(o){console.error(o),ro.length>1&&io(o.shortMessage??"Something went wrong")}if(o){lo(!1),go(!0);try{await xo.switchChain({id:Lo.chain.id})}catch(o){await xo.addChain({chain:Lo.chain}),await xo.switchChain({id:Lo.chain.id})}try{t=await xo.sendTransaction(o)}catch(o){console.error(o),"TransactionExecutionError"===o.name&&(ro.length<1?eo(new w(o.shortMessage,void 0,I.TRANSACTION_FAILURE)):io(o.shortMessage??"Something went wrong"))}if(t)return await xo.waitForTransactionReceipt({hash:t}),po?(wo("pending"),void yo(t)):(go(!1),fo(!0),void Q({eventName:x,payload:{provider:"external",status:"success",txHash:t,address:No.address,chainId:Lo.chain.id,chainType:"ethereum",value:Lo.value?p(BigInt(Lo.value),18):void 0,token:"ETH",destination:Io,destinationClusterName:"mainnet-beta",destinationChainType:"solana",destinationValue:p(Uo,9),destinationToken:"SOL"}}));go(!1)}else lo(!1)})().catch(console.error)}),[xo,Lo]),B({transactionHash:vo,wallet:No,isTestnet:!1,bridgingStatus:bo,setBridgingStatus:wo,onSuccess({transactionHash:o,wallet:t}){uo(!1),fo(!0),Q({eventName:x,payload:{provider:"external",status:"success",txHash:o,address:t.address,chainId:Lo?.chain.id,chainType:"ethereum",value:Lo?.value?p(BigInt(Lo.value),18):void 0,token:"ETH",destination:Io,destinationClusterName:"mainnet-beta",destinationChainType:"solana",destinationValue:p(Uo,9),destinationToken:"SOL"}})},onFailure({error:o}){uo(!1),eo(o)}}),r((()=>{if(!to)return;let o={error:to,previousScreen:q.FUNDING_TRANSFER_FROM_WALLET_SCREEN};Y({funding:J?.funding,sendTransaction:J?.sendTransaction,errorModalData:o}),X(q.ERROR_SCREEN,!1)}),[to]);let Ho=No?N(No.walletClientType,No.connectorType,No.walletClientType)||"wallet":null;if(r((()=>{if(!jo)return;let o=setTimeout(V,b);return()=>clearTimeout(o)}),[jo]),jo/*#__PURE__*/)return o(t,{children:[/*#__PURE__*/e(f,{}),/*#__PURE__*/e(d,{}),/*#__PURE__*/o(u,{children:[/*#__PURE__*/e(n,{color:"var(--privy-color-success)",width:"64px",height:"64px"}),/*#__PURE__*/e(j,{title:"Success!",description:`You’ve successfully added ${So} SOL to your ${Z.name} wallet. It may take a minute before the funds are available to use.`})]}),/*#__PURE__*/e(h,{}),/*#__PURE__*/e(g,{})]});let Oo=ro[ao];return ro.length>1&&Oo?/*#__PURE__*/e($,{displayName:Ho,configuredFundingChain:Co,formattedBalance:Bo,fundingAmount:So,fundingCurrency:"SOL",fundingAmountInUsd:Ro,options:ro,selectedOption:Oo,isPreparing:co,isSubmitting:ho,addressToFund:Io,fundingWalletAddress:No?.address||"",errorMessage:no,onSubmit:()=>{J.funding?.amount!==So?async function(){if(No&&Oo)try{let o=await A({isTestnet:!1,input:E({amount:Uo.toString(),user:No.address,recipient:Io,destinationChainId:L,destinationCurrency:P,originChainId:Oo.chain.id})}),t=F(o);if(!t)throw Error("Invalid transaction request");uo(!0),Po({data:t.data,to:t.to,value:t.value,chain:Oo.chain})}catch(o){console.error(o),eo(new w("Unable to fetch quotes for bridging",o,I.INSUFFICIENT_BALANCE))}}().catch(console.error):Po({to:Oo.bridgeTx.to,data:Oo.bridgeTx.data,value:Oo.bridgeTx.value,chain:Oo.chain})},onSelect:o=>{o!==ao&&(io(null),mo(o))},onAmountChange:ko}):ho&&No?/*#__PURE__*/e(z,{wallet:No,displayName:Ho,addressToFund:Io,isBridging:po,isErc20Flow:!1,chainId:"solana",chainName:Co.name,totalPriceInUsd:void 0,totalPriceInNativeCurrency:void 0,gasPriceInUsd:void 0,gasPriceInNativeCurrency:void 0}):
/*#__PURE__*/o(t,{children:[/*#__PURE__*/e(f,{}),/*#__PURE__*/e(v,{}),/*#__PURE__*/e("div",{style:{marginTop:"1rem"}}),/*#__PURE__*/e(g,{})]})};export{D as AwaitingEvmToSolBridgingScreen};
