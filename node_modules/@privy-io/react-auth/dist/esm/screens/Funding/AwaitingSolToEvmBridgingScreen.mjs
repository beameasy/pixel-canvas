import{jsxs as o,Fragment as e,jsx as n}from"react/jsx-runtime";import{ModalScreen as t}from"../index.mjs";import i from"@heroicons/react/24/outline/CheckCircleIcon";import{useRef as r,useState as s,useEffect as a}from"react";import{parseEther as m}from"viem";import{RefactorSpacerTop as c,CenteredItemWithGap as l,RefactorSpacerBottom as p}from"../../components/Layouts.mjs";import{BlobbyFooter as d}from"../../components/ModalFooter.mjs";import{CenteredScreenHeader as u}from"../../components/ScreenHeader.mjs";import j from"../../components/embedded-wallets/FundWalletMethodHeader.mjs";import{NeutralSpinner as h}from"../../components/primitives/NeutralSpinner/index.mjs";import{DEFAULT_SUCCESS_SCREEN_EXTRA_LONG_DURATION_MS as g}from"../../constants.mjs";import{PrivyClientError as f,PrivyErrorCode as v}from"../../errors.mjs";import{usePrivyInternal as y}from"../../hooks/internal-context.mjs";import{usePrivyModal as w}from"../../hooks/modal-context.mjs";import{toDisplayName as I}from"../../lib/external-wallets/displayHelpers.mjs";import{ON_RAMP_COMPLETE_ANALYTICS_EVENT as b}from"../../lib/funding/analytics.mjs";import{getQuote as T,toGetQuoteInput as S,useBridgingStatusPolling as C}from"../../lib/funding/reservoir.mjs";import{RELAY_SOLANA_MAINNET_CLUSTER_CHAIN_ID as A,RELAY_SOLANA_USDC_TOKEN_ID as N,RELAY_SOLANA_NATIVE_CURRENCY_ID as k}from"../../lib/solana/index.mjs";import{usePlugins as F}from"../../plugins/context/PrivyPluginContext.mjs";import{SOLANA_FUNDING_PLUGIN_ID as E}from"../../plugins/solana-funding/id.mjs";import{formatSolanaWalletAddress as x}from"../../utils/index.mjs";import{TransferOrBridgeLoadingScreen as R}from"./TransferOrBridgeLoadingScreen.mjs";import{useSolanaWallets as U}from"../../hooks/solana/useSolanaWallets.mjs";import"styled-components";import"../../configuration/context.mjs";import"../../config.mjs";import"../../configuration/defaultClientConfig.mjs";import"../../configuration/login-methods.mjs";import"../../configuration/wallets.mjs";import"../../connectors/chains/index.mjs";import"../../connectors/chains/arbitrum.mjs";import"../../connectors/chains/arbitrumSepolia.mjs";import"../../connectors/chains/avalanche.mjs";import"../../connectors/chains/avalancheFuji.mjs";import"../../connectors/chains/base.mjs";import"../../connectors/chains/baseSepolia.mjs";import"../../connectors/chains/berachainArtio.mjs";import"../../connectors/chains/celo.mjs";import"../../connectors/chains/celoAlfajores.mjs";import"../../connectors/chains/filecoin.mjs";import"../../connectors/chains/filecoinCalibration.mjs";import"../../connectors/chains/garnetHolesky.mjs";import"../../connectors/chains/holesky.mjs";import"../../connectors/chains/linea.mjs";import"../../connectors/chains/lineaTestnet.mjs";import"../../connectors/chains/lukso.mjs";import"../../connectors/chains/mainnet.mjs";import"../../connectors/chains/optimism.mjs";import"../../connectors/chains/optimismSepolia.mjs";import"../../connectors/chains/polygon.mjs";import"../../connectors/chains/polygonAmoy.mjs";import"../../connectors/chains/redstone.mjs";import"../../connectors/chains/sepolia.mjs";import"../../connectors/chains/zora.mjs";import"../../connectors/chains/zoraSepolia.mjs";import"../../connectors/chains/zoraTestnet.mjs";import"../../connectors/chains/utils.mjs";import"../../theme.mjs";import"tinycolor2";import"../../lib/cybr53.mjs";import"../../svg/protected-by-privy.mjs";import"../../components/ModalHeader.mjs";import"@heroicons/react/24/outline/ArrowLeftIcon";import"@heroicons/react/24/outline/ArrowRightIcon";import"@heroicons/react/24/outline/QuestionMarkCircleIcon";import"@heroicons/react/24/outline/XMarkIcon";import"../../hooks/index.mjs";import"ofetch";import"../../components/PrefetchedImage.mjs";import"../../svg/backpack.mjs";import"../../svg/brave-browser-icon.mjs";import"../../svg/bybit.mjs";import"../../svg/coinbase-wallet.mjs";import"../../svg/cryptocom.mjs";import"../../svg/metamask.mjs";import"../../svg/okx-wallet.mjs";import"../../svg/phantom.mjs";import"../../svg/rabby.mjs";import"../../svg/rainbow.mjs";import"../../svg/safe.mjs";import"../../svg/solflare.mjs";import"../../svg/uniswap.mjs";import"../../svg/universal-profile.mjs";import"../../svg/wallet-connect.mjs";import"../../svg/zerion.mjs";import"../../connectors/get-legacy-injected-providers.mjs";import"../../connectors/is-wallet-installed.mjs";import"../../utils/eth/getPublicClient.mjs";import"../../components/external-wallets/InjectedWalletIcon.mjs";import"@heroicons/react/24/outline/WalletIcon";import"../../components/ui/layout/Row.mjs";import"../../components/ui/typography/LabelSm.mjs";import"../../components/ui/typography/Value.mjs";import"../../components/ui/animation/LoadingSkeleton.mjs";import"../../components/ui/wallet/Address.mjs";import"@heroicons/react/24/outline/CheckIcon";import"@heroicons/react/24/outline/Square2StackIcon";import"../../components/ui/wallet/NetworkIcon.mjs";import"@heroicons/react/24/outline/GlobeAltIcon";import"../../components/ui/icons/Arbitum.mjs";import"../../components/ui/icons/Avalanche.mjs";import"../../components/ui/icons/Base.mjs";import"../../components/ui/icons/Celo.mjs";import"../../components/ui/icons/Linea.mjs";import"../../components/ui/icons/Mainnnet.mjs";import"../../components/ui/icons/Optimism.mjs";import"../../components/ui/icons/Polygon.mjs";import"../../components/ui/icons/Solana.mjs";import"../../components/ui/icons/Zora.mjs";import"../../hooks/useWallets.mjs";function L(){let{closePrivyModal:L,createAnalyticsEvent:_}=y(),{navigate:M,setModalData:P,app:W,data:H}=w(),{wallets:O}=U(),B=r(!1),$=F(),[D,q]=s(!1),[z,G]=s(!1),[Q,V]=s(null),[X,Y]=s(),[Z,J]=s();if(!H?.funding||"ethereum"!==H.funding.chainType)throw Error("Invalid funding data");let{amount:K,connectedWalletAddress:oo,chain:eo,cluster:no,isUSDC:to}=H.funding,io=H.funding.address,ro=H.funding.erc20Address,so=H.funding.isUSDC?"USDC":eo.nativeCurrency.symbol,ao=no??{name:"mainnet-beta"},mo=oo?O.find((({address:o})=>o===oo)):O[0];if(a((()=>{(async function(){if(!mo||!eo||B.current)return;let o=$(E);if(!o)return void V(new f("Unable to solana plugin"));B.current=!0,eo?.testnet&&console.warn("Solana testnets are not supported for bridging");let e=to?1e6*parseFloat(K):m(K),n=await T({isTestnet:!!eo.testnet,input:S({amount:e.toString(),user:mo.address,recipient:io,destinationChainId:eo.id,originChainId:A,originCurrency:to?N:k,destinationCurrency:to?ro:void 0})}).catch(console.error);if(!n)return void V(new f(`Unable to fetch quotes for bridging. Wallet ${x(mo.address)} does not have enough funds.`,void 0,v.INSUFFICIENT_BALANCE));let t=await o.createBridgeTransactionFromRelayQuote({quote:n,from:mo.address,cluster:ao});if(t)try{q(!0);let{connection:o,transaction:e}=t,i=await o.simulateTransaction(e);if(i.value.err)return i.value.logs?.find((o=>/insufficient (lamports|funds)/gi.test(o)))?void V(new f(`Wallet ${x(mo?.address)} does not have enough funds. ${n.details.currencyIn.amountFormatted} ${so} are needed to complete the transaction.`,void 0,v.INSUFFICIENT_BALANCE)):(console.error("Transaction failed:",i.value.err),void V(new f("Something went wrong",void 0,v.TRANSACTION_FAILURE)));let r=await mo.sendTransaction(e,o),s=await o.confirmTransaction(r);if(s.value.err)return console.error("Transaction failed:",s.value.err),void V(new f("Something went wrong",void 0,v.TRANSACTION_FAILURE));Y(r),J("pending")}catch(o){if(console.error(o),/user rejected the request/gi.test(o.message||""))return void V(new f("Transaction was rejected by the user",void 0,v.TRANSACTION_FAILURE));V(new f("Something went wrong",void 0,v.TRANSACTION_FAILURE))}else V(new f(`Unable to select bridge option from quotes. Wallet ${x(mo.address)} does not have enough funds.`,void 0,v.INSUFFICIENT_BALANCE))})().catch(console.error)}),[]),C({transactionHash:X,wallet:mo,isTestnet:!1,bridgingStatus:Z,setBridgingStatus:J,onSuccess({transactionHash:o,wallet:e}){q(!1),G(!0),_({eventName:b,payload:{provider:"external",status:"success",txHash:o,address:e.address,chainType:"solana",clusterName:ao.name,token:"SOL",destinationAddress:io,destinationChainId:eo.id,destinationChainType:"ethereum",destinationValue:K,destinationToken:to?"USDC":"ETH"}})},onFailure({error:o}){q(!1),V(o)}}),a((()=>{if(!z)return;let o=setTimeout(L,g);return()=>clearTimeout(o)}),[z]),a((()=>{if(!Q)return;let o={error:Q,previousScreen:t.FUNDING_TRANSFER_FROM_WALLET_SCREEN};P({funding:H?.funding,sendTransaction:H?.sendTransaction,errorModalData:o}),M(t.ERROR_SCREEN,!1)}),[Q]),z/*#__PURE__*/)return o(e,{children:[/*#__PURE__*/n(j,{}),/*#__PURE__*/n(c,{}),/*#__PURE__*/o(l,{children:[/*#__PURE__*/n(i,{color:"var(--privy-color-success)",width:"64px",height:"64px"}),/*#__PURE__*/n(u,{title:"Success!",description:`Youâ€™ve successfully added ${K} ${so} to your ${W.name} wallet. It may take a minute before the funds are available to use.`})]}),/*#__PURE__*/n(p,{}),/*#__PURE__*/n(d,{})]});if(D&&mo){let o=mo?I(mo.walletClientType,mo.connectorType,mo.walletClientType)||"wallet":null;/*#__PURE__*/return n(R,{wallet:mo,displayName:o,addressToFund:io,isBridging:D,isErc20Flow:!1,chainId:eo.id,chainName:eo.name,totalPriceInUsd:void 0,totalPriceInNativeCurrency:void 0,gasPriceInUsd:void 0,gasPriceInNativeCurrency:void 0})}/*#__PURE__*/
return o(e,{children:[/*#__PURE__*/n(j,{}),/*#__PURE__*/n(h,{}),/*#__PURE__*/n("div",{style:{marginTop:"1rem"}}),/*#__PURE__*/n(d,{})]})}export{L as AwaitingSolToEvmBridgingScreen};
