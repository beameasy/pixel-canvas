"use strict";var e=require("react"),r=require("viem"),n=require("../client/user.js"),t=require("../configuration/context.js"),a=require("../errors.js"),i=require("../hooks/internal-context.js"),s=require("../hooks/modal-context.js"),o=require("../hooks/privy-context.js"),c=require("../hooks/useSmartWalletChain.js"),l=require("../hooks/useWallets.js"),u=require("../screens/index.js"),d=require("../utils/eth/getPublicClient.js"),p=require("./getEmbeddedConnectedWallet.js"),m=require("./smart-wallets-shared.js");require("viem/utils"),require("react/jsx-runtime"),require("../config.js"),require("../configuration/defaultClientConfig.js"),require("../constants.js"),require("../configuration/login-methods.js"),require("../configuration/wallets.js"),require("../connectors/chains/index.js"),require("../connectors/chains/arbitrum.js"),require("../connectors/chains/arbitrumSepolia.js"),require("../connectors/chains/avalanche.js"),require("../connectors/chains/avalancheFuji.js"),require("../connectors/chains/base.js"),require("../connectors/chains/baseSepolia.js"),require("../connectors/chains/berachainArtio.js"),require("../connectors/chains/celo.js"),require("../connectors/chains/celoAlfajores.js"),require("../connectors/chains/filecoin.js"),require("../connectors/chains/filecoinCalibration.js"),require("../connectors/chains/garnetHolesky.js"),require("../connectors/chains/holesky.js"),require("../connectors/chains/linea.js"),require("../connectors/chains/lineaTestnet.js"),require("../connectors/chains/lukso.js"),require("../connectors/chains/mainnet.js"),require("../connectors/chains/optimism.js"),require("../connectors/chains/optimismSepolia.js"),require("../connectors/chains/polygon.js"),require("../connectors/chains/polygonAmoy.js"),require("../connectors/chains/redstone.js"),require("../connectors/chains/sepolia.js"),require("../connectors/chains/zora.js"),require("../connectors/chains/zoraSepolia.js"),require("../connectors/chains/zoraTestnet.js"),require("../connectors/chains/utils.js"),require("./solana/index.js"),require("../theme.js"),require("tinycolor2"),require("./cybr53.js"),require("ofetch"),require("../hooks/index.js"),require("../components/PrefetchedImage.js"),require("permissionless"),require("permissionless/accounts"),require("permissionless/clients/pimlico"),require("viem/account-abstraction"),require("@privy-io/js-sdk-core");const y=({calls:e,chain:r,maxPriorityFeePerGas:n,maxFeePerGas:t,nonce:a})=>e.map((e=>({to:e.to||void 0,data:e.data,value:e.value,chainId:r.id,nonce:a,maxFeePerGas:t,maxPriorityFeePerGas:n}))),E=async({chain:e,paymasterContext:n,embeddedWallet:t,user:i,smartWalletsConfig:s,rpcConfig:o,privyAppId:c})=>{if(!s?.enabled||!i||!t)return;let l=await t.getEthereumProvider(),u=s?.configuredNetworks.find((r=>r.chainId===`eip155:${e.id}`));if(!u)throw new a.PrivyClientError(`The chain ${e.name} (eip155:${e.id}) must be configured in the smart wallet configuration in your dashboard`);let p=i.smartWallet?.smartWalletType??s.smartWalletType,y=d.getJsonRpcEndpointFromChain(e,o,c),E=r.createPublicClient({chain:e,transport:r.http(y)}),h=n??u.paymasterContext,g=await m.signerToSmartAccountClient({owner:l,smartWalletType:p,chain:e,publicClient:E,paymasterContext:h,...u});if(!g)throw new a.PrivyClientError(`Failed to create smart wallet client for chain ${e.name} (eip155:${e.id})`);return g};exports.callsToTransactionRequests=y,exports.getSmartWalletClient=E,exports.useSmartWalletsUIWrapper=()=>{let{hideWalletUIs:e,openPrivyModal:r}=i.usePrivyInternal(),a=t.useAppConfig(),{setModalData:c}=s.usePrivyModal(),{user:l}=o.usePrivyContext();return{wrapSmartAccountClientWithUIs:t=>({...t,sendTransaction:async(i,s)=>{if(!a.embeddedWallets.showWalletUIs)return e.current=!0,await t.sendTransaction(i).finally((()=>e.current=!1));let o=[];"calls"in i&&void 0!==i.calls?o=[...i.calls]:"to"in i&&(o=[{to:i.to,value:i.value||BigInt(0),data:i.data||"0x"}]);let d=async()=>{if(!t.paymaster)return!1;let{paymasterAndData:e,paymasterData:r}=await t.prepareUserOperation({calls:o,maxFeePerGas:i.maxFeePerGas,maxPriorityFeePerGas:i.maxPriorityFeePerGas,nonce:i.nonce?BigInt(i.nonce):void 0});return Number(e??r??0)>0};return new Promise((async(a,p)=>{e.current=!0;let{entropyId:m,entropyIdVerifier:E}=n.getEntropyDetailsFromUser(l);c({connectWallet:{entropyId:m,entropyIdVerifier:E,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:y({calls:o,chain:t.chain,maxPriorityFeePerGas:i.maxPriorityFeePerGas,maxFeePerGas:i.maxFeePerGas,nonce:i.nonce?BigInt(i.nonce):void 0}),entropyId:m,entropyIdVerifier:E,transactingWallet:{address:t.account.address,walletIndex:null},getIsSponsored:d,signOnly:!1,onConfirm:()=>t.sendTransaction(i),onSuccess:e=>a(e.hash),onFailure:p,uiOptions:s?.uiOptions??{}}}),r(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1}))},signMessage:async(i,s)=>a.embeddedWallets.showWalletUIs?new Promise((async(a,o)=>{let{entropyId:d,entropyIdVerifier:p}=n.getEntropyDetailsFromUser(l);e.current=!0,c({connectWallet:{entropyId:d,entropyIdVerifier:p,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:"string"==typeof i.message?i.message:i.message.raw.toString(),confirmAndSign:()=>t.signMessage(i),onSuccess:e=>a(e),onFailure:o,uiOptions:s?.uiOptions??{}}}),r(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1})):(e.current=!0,await t.signMessage(i).finally((()=>e.current=!1))),signTypedData:async(i,s)=>a.embeddedWallets.showWalletUIs?new Promise((async(a,o)=>{e.current=!0;let{entropyId:d,entropyIdVerifier:p}=n.getEntropyDetailsFromUser(l);c({connectWallet:{entropyId:d,entropyIdVerifier:p,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:i,confirmAndSign:()=>t.signTypedData(i),onSuccess:e=>a(e),onFailure:o,uiOptions:s?.uiOptions??{}}}),r(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1})):(e.current=!0,await t.signTypedData(i).finally((()=>e.current=!1)))})}},exports.useSmartWalletsWrapper=({clientConfig:r,smartWalletsConfig:d})=>{let{hideWalletUIs:m,openPrivyModal:h,appId:g}=i.usePrivyInternal(),f=t.useAppConfig(),{setModalData:C}=s.usePrivyModal(),{user:I}=o.usePrivyContext(),{chains:S}=t.useAppConfig(),{chainId:q,clients:D,setChainId:T,chainIdState:W}=c.useSmartWalletChains(),j=S.find((e=>e.id===W)),{wallets:P}=l.useWallets(),w=e.useCallback((async()=>q.current),[q]),N=e.useCallback((async({id:e})=>{if(!D.current[e]){let n=p.getEmbeddedConnectedWallet(P),t=await E({chain:S.find((r=>r.id===e)),embeddedWallet:n,user:I,paymasterContext:r?.paymasterContext,smartWalletsConfig:d,rpcConfig:f.rpcConfig,privyAppId:g});t&&(D.current[e]=t)}T(e)}),[S,r,P,I,d]);return{wrapSmartAccountClient:e=>{D.current[e.chain.id]=e,W||T(e.chain.id);return{...e,sendTransaction:async(e,r)=>{let t=D.current[q.current];if(!t)throw new a.PrivyClientError(`Smart wallet client for chain (eip155:${q.current}) not found`);if(delete e.account,!f.embeddedWallets.showWalletUIs)return m.current=!0,await t.sendTransaction(e).finally((()=>m.current=!1));let i=[];"calls"in e&&void 0!==e.calls?i=[...e.calls]:"to"in e&&(i=[{to:e.to,value:e.value||BigInt(0),data:e.data||"0x"}]);let s=async()=>{if(!t.paymaster)return!1;let{paymasterAndData:r,paymasterData:n}=await t.prepareUserOperation({calls:i,maxFeePerGas:e.maxFeePerGas,maxPriorityFeePerGas:e.maxPriorityFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0});return Number(r??n??0)>0};return new Promise((async(a,o)=>{m.current=!0;let{entropyId:c,entropyIdVerifier:l}=n.getEntropyDetailsFromUser(I);C({connectWallet:{entropyId:c,entropyIdVerifier:l,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:y({calls:i,chain:t.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:c,entropyIdVerifier:l,transactingWallet:{address:t.account.address,walletIndex:null},getIsSponsored:s,signOnly:!1,onConfirm:()=>t.sendTransaction(e),onSuccess:e=>a(e.hash),onFailure:o,uiOptions:r?.uiOptions??{}}}),h(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{m.current=!1}))},signMessage:async(e,r)=>{let t=D.current[q.current];if(!t)throw new a.PrivyClientError(`Smart wallet client for chain (eip155:${q.current}) not found`);return f.embeddedWallets.showWalletUIs?new Promise((async(a,i)=>{let{entropyId:s,entropyIdVerifier:o}=n.getEntropyDetailsFromUser(I);m.current=!0,C({connectWallet:{entropyId:s,entropyIdVerifier:o,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:"string"==typeof e.message?e.message:e.message.raw.toString(),confirmAndSign:()=>t.signMessage(e),onSuccess:e=>a(e),onFailure:i,uiOptions:r?.uiOptions??{}}}),h(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{m.current=!1})):(m.current=!0,await t.signMessage(e).finally((()=>m.current=!1)))},signTypedData:async(e,r)=>{let t=D.current[q.current];if(!t)throw new a.PrivyClientError(`Smart wallet client for chain (eip155:${q.current}) not found`);return delete e.account,f.embeddedWallets.showWalletUIs?new Promise((async(a,i)=>{m.current=!0;let{entropyId:s,entropyIdVerifier:o}=n.getEntropyDetailsFromUser(I);C({connectWallet:{entropyId:s,entropyIdVerifier:o,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:e,confirmAndSign:()=>t.signTypedData(e),onSuccess:e=>a(e),onFailure:i,uiOptions:r?.uiOptions??{}}}),h(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{m.current=!1})):(m.current=!0,await t.signTypedData(e).finally((()=>m.current=!1)))},getChainId:w,chain:j,switchChain:N}}}};
