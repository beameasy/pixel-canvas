"use strict";var e=require("react"),r=require("viem"),n=require("../client/user.js"),t=require("../configuration/context.js"),i=require("../errors.js"),a=require("../hooks/internal-context.js"),s=require("../hooks/modal-context.js"),o=require("../hooks/privy-context.js"),c=require("../hooks/useSmartWalletChain.js"),l=require("../hooks/useWallets.js"),u=require("../screens/index.js"),d=require("../utils/eth/getPublicClient.js"),p=require("./getEmbeddedConnectedWallet.js"),m=require("./smart-wallets-shared.js");require("viem/utils"),require("react/jsx-runtime"),require("../config.js"),require("../configuration/defaultClientConfig.js"),require("../constants.js"),require("../configuration/login-methods.js"),require("../configuration/wallets.js"),require("../connectors/chains/index.js"),require("../connectors/chains/arbitrum.js"),require("../connectors/chains/arbitrumSepolia.js"),require("../connectors/chains/avalanche.js"),require("../connectors/chains/avalancheFuji.js"),require("../connectors/chains/base.js"),require("../connectors/chains/baseSepolia.js"),require("../connectors/chains/berachainArtio.js"),require("../connectors/chains/celo.js"),require("../connectors/chains/celoAlfajores.js"),require("../connectors/chains/filecoin.js"),require("../connectors/chains/filecoinCalibration.js"),require("../connectors/chains/garnetHolesky.js"),require("../connectors/chains/holesky.js"),require("../connectors/chains/linea.js"),require("../connectors/chains/lineaTestnet.js"),require("../connectors/chains/lukso.js"),require("../connectors/chains/mainnet.js"),require("../connectors/chains/optimism.js"),require("../connectors/chains/optimismSepolia.js"),require("../connectors/chains/polygon.js"),require("../connectors/chains/polygonAmoy.js"),require("../connectors/chains/redstone.js"),require("../connectors/chains/sepolia.js"),require("../connectors/chains/zora.js"),require("../connectors/chains/zoraSepolia.js"),require("../connectors/chains/zoraTestnet.js"),require("../connectors/chains/utils.js"),require("./solana/index.js"),require("../theme.js"),require("tinycolor2"),require("./cybr53.js"),require("ofetch"),require("../hooks/index.js"),require("../components/PrefetchedImage.js"),require("permissionless"),require("permissionless/accounts"),require("permissionless/clients/pimlico"),require("viem/account-abstraction"),require("@privy-io/js-sdk-core");const h=({calls:e,chain:r,maxPriorityFeePerGas:n,maxFeePerGas:t,nonce:i})=>e.map((e=>({to:e.to||void 0,data:e.data,value:e.value,chainId:r.id,nonce:i,maxFeePerGas:t,maxPriorityFeePerGas:n}))),y=async({chain:e,paymasterContext:n,embeddedWallet:t,user:a,smartWalletsConfig:s,rpcConfig:o,privyAppId:c})=>{if(!s?.enabled||!a||!t)return;let l=await t.getEthereumProvider(),u=s?.configuredNetworks.find((r=>r.chainId===`eip155:${e.id}`));if(!u)throw new i.PrivyClientError(`The chain ${e.name} (eip155:${e.id}) must be configured in the smart wallet configuration in your dashboard`);let p=a.smartWallet?.smartWalletType??s.smartWalletType,h=d.getJsonRpcEndpointFromChain(e,o,c),y=r.createPublicClient({chain:e,transport:r.http(h)}),g=n??u.paymasterContext,q=await m.signerToSmartAccountClient({owner:l,smartWalletType:p,chain:e,publicClient:y,paymasterContext:g,...u});if(!q)throw new i.PrivyClientError(`Failed to create smart wallet client for chain ${e.name} (eip155:${e.id})`);return q};exports.callsToTransactionRequests=h,exports.getSmartWalletClient=y,exports.useSmartWalletsWrapper=({clientConfig:r,smartWalletsConfig:d})=>{let{hideWalletUIs:m,openPrivyModal:g,appId:q}=a.usePrivyInternal(),f=t.useAppConfig(),{setModalData:C}=s.usePrivyModal(),{user:E}=o.usePrivyContext(),{chains:j}=t.useAppConfig(),{chainId:I,clients:S,setChainId:w,chainIdState:W}=c.useSmartWalletChains(),P=j.find((e=>e.id===W)),{wallets:T}=l.useWallets(),v=e.useCallback((async()=>I.current),[I]),x=e.useCallback((async({id:e})=>{if(!S.current[e]){let n=p.getEmbeddedConnectedWallet(T),t=await y({chain:j.find((r=>r.id===e)),embeddedWallet:n,user:E,paymasterContext:r?.paymasterContext,smartWalletsConfig:d,rpcConfig:f.rpcConfig,privyAppId:q});t&&(S.current[e]=t)}w(e)}),[j,r,T,E,d]);return{wrapSmartAccountClient:e=>{S.current[e.chain.id]=e,W||w(e.chain.id);return{...e,sendTransaction:async(e,r)=>{let t=S.current[I.current];if(!t)throw new i.PrivyClientError(`Smart wallet client for chain (eip155:${I.current}) not found`);if(delete e.account,!f.embeddedWallets.showWalletUIs)return m.current=!0,await t.sendTransaction(e).finally((()=>m.current=!1));let a=[];"calls"in e&&void 0!==e.calls?a=[...e.calls]:"to"in e&&(a=[{to:e.to,value:e.value||BigInt(0),data:e.data||"0x"}]);let s=async()=>{if(!t.paymaster)return!1;let{paymasterAndData:r,paymasterData:n}=await t.prepareUserOperation({calls:a,maxFeePerGas:e.maxFeePerGas,maxPriorityFeePerGas:e.maxPriorityFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0});return Number(r??n??0)>0};return new Promise((async(i,o)=>{m.current=!0;let{entropyId:c,entropyIdVerifier:l}=n.getEntropyDetailsFromUser(E);C({connectWallet:{entropyId:c,entropyIdVerifier:l,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:h({calls:a,chain:t.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:c,entropyIdVerifier:l,transactingWallet:{address:t.account.address,walletIndex:null},getIsSponsored:s,signOnly:!1,onConfirm:()=>t.sendTransaction(e),onSuccess:e=>i(e.hash),onFailure:o,uiOptions:r?.uiOptions??{}}}),g(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{m.current=!1}))},signMessage:async(e,r)=>{let t=S.current[I.current];if(!t)throw new i.PrivyClientError(`Smart wallet client for chain (eip155:${I.current}) not found`);return f.embeddedWallets.showWalletUIs?new Promise((async(i,a)=>{let{entropyId:s,entropyIdVerifier:o}=n.getEntropyDetailsFromUser(E);m.current=!0,C({connectWallet:{entropyId:s,entropyIdVerifier:o,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:"string"==typeof e.message?e.message:e.message.raw.toString(),confirmAndSign:()=>t.signMessage(e),onSuccess:e=>i(e),onFailure:a,uiOptions:r?.uiOptions??{}}}),g(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{m.current=!1})):(m.current=!0,await t.signMessage(e).finally((()=>m.current=!1)))},signTypedData:async(e,r)=>{let t=S.current[I.current];if(!t)throw new i.PrivyClientError(`Smart wallet client for chain (eip155:${I.current}) not found`);return delete e.account,f.embeddedWallets.showWalletUIs?new Promise((async(i,a)=>{m.current=!0;let{entropyId:s,entropyIdVerifier:o}=n.getEntropyDetailsFromUser(E);C({connectWallet:{entropyId:s,entropyIdVerifier:o,onCompleteNavigateTo:u.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:e,confirmAndSign:()=>t.signTypedData(e),onSuccess:e=>i(e),onFailure:a,uiOptions:r?.uiOptions??{}}}),g(u.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{m.current=!1})):(m.current=!0,await t.signTypedData(e).finally((()=>m.current=!1)))},getChainId:v,chain:P,switchChain:x}}}};
