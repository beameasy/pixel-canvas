"use strict";var e=require("@abstract-foundation/agw-client"),r=require("viem"),n=require("viem/accounts"),s=require("viem/chains"),i=require("../client/user.js"),a=require("../hooks/internal-context.js"),t=require("../hooks/modal-context.js"),o=require("../hooks/privy-context.js"),c=require("../hooks/useWallets.js"),l=require("../screens/index.js"),u=require("../utils/eth/getPublicClient.js"),d=require("./getEmbeddedConnectedWallet.js"),p=require("./smart-wallets.js");require("viem/utils"),require("react"),require("../hooks/index.js"),require("react/jsx-runtime"),require("../components/PrefetchedImage.js"),require("../configuration/context.js"),require("../config.js"),require("../configuration/defaultClientConfig.js"),require("../constants.js"),require("../configuration/login-methods.js"),require("../configuration/wallets.js"),require("../connectors/chains/index.js"),require("../connectors/chains/arbitrum.js"),require("../connectors/chains/arbitrumSepolia.js"),require("../connectors/chains/avalanche.js"),require("../connectors/chains/avalancheFuji.js"),require("../connectors/chains/base.js"),require("../connectors/chains/baseSepolia.js"),require("../connectors/chains/berachainArtio.js"),require("../connectors/chains/celo.js"),require("../connectors/chains/celoAlfajores.js"),require("../connectors/chains/filecoin.js"),require("../connectors/chains/filecoinCalibration.js"),require("../connectors/chains/garnetHolesky.js"),require("../connectors/chains/holesky.js"),require("../connectors/chains/linea.js"),require("../connectors/chains/lineaTestnet.js"),require("../connectors/chains/lukso.js"),require("../connectors/chains/mainnet.js"),require("../connectors/chains/optimism.js"),require("../connectors/chains/optimismSepolia.js"),require("../connectors/chains/polygon.js"),require("../connectors/chains/polygonAmoy.js"),require("../connectors/chains/redstone.js"),require("../connectors/chains/sepolia.js"),require("../connectors/chains/zora.js"),require("../connectors/chains/zoraSepolia.js"),require("../connectors/chains/zoraTestnet.js"),require("../connectors/chains/utils.js"),require("./solana/index.js"),require("../theme.js"),require("tinycolor2"),require("./cybr53.js"),require("../errors.js"),require("ofetch"),require("../hooks/useSmartWalletChain.js"),require("./smart-wallets-shared.js"),require("permissionless"),require("permissionless/accounts"),require("permissionless/clients/pimlico"),require("viem/account-abstraction"),require("@privy-io/js-sdk-core"),exports.useAbstractSmartWallets=function(){let{user:h}=o.usePrivyContext(),{hideWalletUIs:E,openPrivyModal:q,chains:y,appId:g,rpcConfig:m}=a.usePrivyInternal(),{wallets:j}=c.useWallets(),{setModalData:T}=t.usePrivyModal(),C=async(i=s.abstractTestnet.id)=>{let a=d.getEmbeddedConnectedWallet(j);if(!a)throw Error("No connected wallet found");let t="string"==typeof i?r.hexToNumber(i):i;if(![s.abstractTestnet.id,2741].includes(t))throw Error("Error, only Abstract chains are supported");let o=y.find((e=>e.id===t));if(!o)throw Error("Chain not configured");await a.switchChain(o.id);let c=await a.getEthereumProvider(),l=r.createWalletClient({account:a.address,transport:r.custom(c)}),p=n.toAccount({address:a.address,signMessage:l.signMessage,signTransaction:l.signTransaction,signTypedData:l.signTypedData});return await e.createAbstractClient({chain:o,transport:r.http(u.getJsonRpcEndpointFromChain(o,m,g)),publicTransport:r.http(u.getJsonRpcEndpointFromChain(o,m,g)),signer:p})};return{signMessage:async({message:e},r)=>{let n=await C(r);return new Promise((async(r,s)=>{let{entropyId:a,entropyIdVerifier:t}=i.getEntropyDetailsFromUser(h);E.current=!0,T({connectWallet:{entropyId:a,entropyIdVerifier:t,onCompleteNavigateTo:l.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:e,confirmAndSign:()=>n.signMessage({message:e}),onSuccess:e=>r(e),onFailure:s,uiOptions:{isCancellable:!0}}}),q(l.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{E.current=!1}))},signTypedData:async(e,r)=>{let n=await C(r);return new Promise((async(r,s)=>{E.current=!0;let{entropyId:a,entropyIdVerifier:t}=i.getEntropyDetailsFromUser(h);T({connectWallet:{entropyId:a,entropyIdVerifier:t,onCompleteNavigateTo:l.ModalScreen.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:e,confirmAndSign:()=>n.signTypedData(e),onSuccess:e=>r(e),onFailure:s,uiOptions:{isCancellable:!0}}}),q(l.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{E.current=!1}))},sendTransaction:async e=>{let r=await C(e.chainId),n=[],s="calls"in e&&void 0!==e.calls;return n=s?[...e.calls]:[e],new Promise((async(a,t)=>{E.current=!0;let{entropyId:o,entropyIdVerifier:c}=i.getEntropyDetailsFromUser(h);T({connectWallet:{entropyId:o,entropyIdVerifier:c,onCompleteNavigateTo:l.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:p.callsToTransactionRequests({calls:n,chain:r.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:o,entropyIdVerifier:c,transactingWallet:{address:r.account.address,walletIndex:null},signOnly:!1,getIsSponsored:async()=>void 0!==e.paymaster&&void 0!==e.paymasterInput,onConfirm:()=>s?r.sendTransactionBatch(e):r.sendTransaction(e),onSuccess:e=>a(e.hash),onFailure:t,uiOptions:{isCancellable:!0}}}),q(l.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{E.current=!1}))},signTransaction:async e=>{let r=await C(e.chainId),n=[],s="calls"in e&&void 0!==e.calls;return n=s?[...e.calls]:[e],new Promise((async(a,t)=>{E.current=!0;let{entropyId:o,entropyIdVerifier:c}=i.getEntropyDetailsFromUser(h);T({connectWallet:{entropyId:o,entropyIdVerifier:c,onCompleteNavigateTo:l.ModalScreen.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:p.callsToTransactionRequests({calls:n,chain:r.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:o,entropyIdVerifier:c,transactingWallet:{address:r.account.address,walletIndex:null},signOnly:!0,getIsSponsored:async()=>void 0!==e.paymaster&&void 0!==e.paymasterInput,onConfirm:()=>{if(!s)return r.signTransaction(e);throw Error("Batch transactions not supported for signing")},onSuccess:e=>a(e.hash),onFailure:t,uiOptions:{isCancellable:!0}}}),q(l.ModalScreen.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{E.current=!1}))}}};
