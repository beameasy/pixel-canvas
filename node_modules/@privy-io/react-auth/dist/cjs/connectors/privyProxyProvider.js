"use strict";var e=require("../constants.js"),r=require("../errors.js"),t=require("./errors.js");require("ofetch"),require("@privy-io/js-sdk-core");exports.PrivyProxyProvider=class{on(e,r){if(this.walletProvider)return this.walletProvider.on(e,r);this._subscriptions.push({eventName:e,listener:r})}async request(e){if(!this.walletProvider)throw new r.PrivyConnectorError(`A wallet request of type ${e.method} was made before setting a wallet provider.`);return Promise.race([this.walletProvider.request(e),this.walletTimeout()]).catch((e=>{throw t.formatConnectorError(e)}))}constructor(r,i){this.removeListener=(e,r)=>{if(this.walletProvider)try{return this.walletProvider.removeListener(e,r)}catch(e){console.warn("Unable to remove wallet provider listener")}},this.walletTimeout=(e=new t.WalletTimeoutError,r=this.rpcTimeoutDuration)=>new Promise(((t,i)=>setTimeout((()=>{i(e)}),r))),this.setWalletProvider=e=>{this.walletProvider&&this._subscriptions.forEach((e=>{this.removeListener(e.eventName,e.listener)})),this.walletProvider=e,this._subscriptions.forEach((e=>{this.walletProvider?.on(e.eventName,e.listener)}))},this.walletProvider=r,this.rpcTimeoutDuration=i||e.DEFAULT_RPC_TIMEOUT,this._subscriptions=[]}};
