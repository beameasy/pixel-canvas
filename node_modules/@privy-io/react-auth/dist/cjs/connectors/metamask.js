"use strict";var e=require("react-device-detect"),r=require("../errors.js"),t=require("./errors.js"),s=require("./injected.js");require("ofetch"),require("@privy-io/js-sdk-core"),require("../svg/browser-extension-wallet-icon.js"),require("react/jsx-runtime"),require("../svg/metamask.js"),require("../svg/phantom.js"),require("./ethereum/index.js"),require("viem/utils"),require("../constants.js"),require("../storage.js"),require("../utils/index.js"),require("./get-legacy-injected-providers.js"),require("./is-wallet-installed.js"),require("../utils/eth/getPublicClient.js"),require("viem"),require("./areWalletArraysEqual.js"),require("./isBaseConnectedEthereumWallet.js"),require("./base.js"),require("eventemitter3"),require("./getRpcTimeout.js"),require("./privyProxyProvider.js");class i extends s.Injected6963WalletConnector{disconnect(){console.warn("MetaMask does not support programmatic disconnect.")}async promptConnection(){try{e.isMobile||await this.proxyProvider.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]});let t=await this.proxyProvider.request({method:"eth_requestAccounts"});if(!t||0===t.length||!t[0])throw new r.PrivyConnectorError("Unable to retrieve accounts");await this.syncAccounts([t[0]])}catch(e){throw t.formatConnectorError(e)}}}exports.MetamaskWalletConnector=i;
